class Solution {
  public:
    void dfs(vector<vector<int>> &image, int i, int j, int oldColor, int newColor, int n, int m) {
        // Boundary and base checks
        if (i < 0 || j < 0 || i >= n || j >= m) return;
        if (image[i][j] != oldColor) return;

        // Fill with new color
        image[i][j] = newColor;

        // Move in all 4 directions
        dfs(image, i + 1, j, oldColor, newColor, n, m);
        dfs(image, i - 1, j, oldColor, newColor, n, m);
        dfs(image, i, j + 1, oldColor, newColor, n, m);
        dfs(image, i, j - 1, oldColor, newColor, n, m);
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int n = image.size();
        int m = image[0].size();
        int oldColor = image[sr][sc];
        
        // If the old color is same as newColor, no need to fill
        if (oldColor != newColor) {
            dfs(image, sr, sc, oldColor, newColor, n, m);
        }

        return image;
    }
};
